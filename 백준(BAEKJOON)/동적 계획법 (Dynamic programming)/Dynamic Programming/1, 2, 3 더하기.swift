//
//  1, 2, 3 더하기.swift
//  Dynamic Programming
//
//  Created by 최지수 on 2021/09/16.
//

/**
 [문제]
 정수 4를 1, 2, 3의 합으로 나타내는 방법은 총 7가지가 있다. 합을 나타낼 때는 수를 1개 이상 사용해야 한다.

 1+1+1+1
 1+1+2
 1+2+1
 2+1+1
 2+2
 1+3
 3+1
 정수 n이 주어졌을 때, n을 1, 2, 3의 합으로 나타내는 방법의 수를 구하는 프로그램을 작성하시오.

 [입력]
 첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고, 정수 n이 주어진다. n은 양수이며 11보다 작다.

 [출력]
 각 테스트 케이스마다, n을 1, 2, 3의 합으로 나타내는 방법의 수를 출력한다.
 
 [예제 입력 1]
 3
 4
 7
 10
 [예제 출력 1]
 7
 44
 274
 */
import Foundation

/// 1, 2, 3 더하기
func _123더하기() {
    /*
    // - n의 조건이 큰 숫자일 경우 사용이 불가능하다.
    let n = Int(readLine()!)!
    let dp = [0, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274] // n이 11보다 작으니 10까지 방법의 수를 배열로 만든다.
    (0..<n).forEach { _ in print(dp[Int(readLine()!)!])}
     */
    
    let n = Int(readLine()!)!
    var dp = (3..<10).reduce(into: [0, 1, 2, 4], { r, _ in r.append(0) }) // 11까지 최대 개수를 저장한다.

    for i in 4...10 { // 패턴을 보면 N(n - 3) + N(n - 2) + N(n - 1)의 패턴이다.
        dp[i] = dp[i - 3] + dp[i - 2] + dp[i - 1]
    }
    
    (0..<n).forEach { _ in print(dp[Int(readLine()!)!]) }
}
