//
//  가장 긴 증가하는 부분 수열.swift
//  Dynamic Programming
//
//  Created by 최지수 on 2021/09/20.
//

/**
 [문제]
 수열 A가 주어졌을 때, 가장 긴 증가하는 부분 수열을 구하는 프로그램을 작성하시오.

 예를 들어, 수열 A = {10, 20, 10, 30, 20, 50} 인 경우에 가장 긴 증가하는 부분 수열은 A = {10, 20, 10, 30, 20, 50} 이고, 길이는 4이다.

 [입력]
 첫째 줄에 수열 A의 크기 N (1 ≤ N ≤ 1,000)이 주어진다.

 둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. (1 ≤ Ai ≤ 1,000)

 [출력]
 첫째 줄에 수열 A의 가장 긴 증가하는 부분 수열의 길이를 출력한다.

 [예제 입력 1]
 6
 10 20 10 30 20 50
 [예제 출력 1]
 4
 */

/**
 [내 생각]
 10 60 20 30 40 50 70 순서로 나올 경우
 10 20 30 40 50 70 으로 만들어야 가장 긴 수열이 나온다.
 10 60 70 으로 만들면 망함.
 
 - 풀이 참고
   10  20  10  30  20  50
 0    1    1    1    1    1    1
 1    1    2    1    1    1    1
 2    1    2    2    1    1    1
 3    1    2    2    3    1    1
 4    1    2    2    3    3    1
 5    1    2    2    3    3    4
 
 1. 수열 길이만큼 반복한다. (index = i)
 2. 0부터 i중 현재 수열의 개수보다 긴 경우가 있다면 교체한다. (반복문)
 3. dp에 저장된 수들 중 가장 큰 수를 출력한다.
 */

import Foundation

/// 가장 긴 증가하는 부분 수열
func 가장_긴_증가하는_부분_수열() {
    let n = Int(readLine()!)!
    var dp = Array(repeating: 1, count: n) // 최소 한개로 시작한다.
    let sequence = readLine()!.split(separator: " ").compactMap { Int($0) }
    
    for i in 1..<n { // 수열 길이만큼 반복한다.
        for j in 0..<i { // i이전 수들 중 i보다 작은 수를 찾기 위함
            if sequence[i] > sequence[j] { // sequence[0...j]중 sequence[i]보다 개수가 많으면 교체
                dp[i] = max(dp[i], dp[j] + 1) // dp[i]는 최소 1이고 (0..<i)반복문을 돌면서 높은 수로 변경된다. (dp[j] + 1)은 (이전 개수 + 현재 개수)
            }
        }
    }
    
    print(dp.max()!) // 저장한 길이 중 가장 큰 길이를 출력
}
