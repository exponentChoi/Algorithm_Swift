//
//  1로 만들기.swift
//  Dynamic Programming
//
//  Created by 최지수 on 2021/09/16.
//

/**
 [문제]
 정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.

 X가 3으로 나누어 떨어지면, 3으로 나눈다.
 X가 2로 나누어 떨어지면, 2로 나눈다.
 1을 뺀다.
 정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.

 [입력]
 첫째 줄에 1보다 크거나 같고, 106보다 작거나 같은 정수 N이 주어진다.

 [출력]
 첫째 줄에 연산을 하는 횟수의 최솟값을 출력한다.

 [입/출력 예제]
 예제 1 :  2 => 1
 예제 2 : 10 => 3
 
 [힌트]
 10의 경우에 10 -> 9 -> 3 -> 1 로 3번 만에 만들 수 있다.
 */

import Foundation

/// 1로 만들기
func _1로만들기() {
    let x = Int(readLine()!)!
    if x <= 1 { // 1보다 작은경우 0 반환
        print(0)
    } else {
        var dp = [Int](repeating: 0, count: x + 1) // 각 숫자별 최솟값을 저장하는 배열
        
        for i in 2...x {
            dp[i] = dp[i - 1] + 1 // 바로 앞자리의 수보다 1 더한것을 추가한다.(나누어지지 않는 경우를 위함)
            
            // else if를 사용할 경우 공배수인 경우 한가지만 비교하기 떄문에 정확한 최솟값이 안나온다.
            if i % 3 == 0 { dp[i] = min(dp[i], dp[i / 3] + 1) } // 3으로 나누어지면 이미 구해둔 최소값 + 1을 저장한다.
            if i % 2 == 0 { dp[i] = min(dp[i], dp[i / 2] + 1) } // 2로 나누어지면 이미 구해둔 최소값 + 1을 저장한다.
        }
        print(dp[x])
    }
}
