//
//  RGB거리.swift
//  Dynamic Programming
//
//  Created by 최지수 on 2021/09/18.
//

/**
 [문제]
 RGB거리에는 집이 N개 있다. 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다.

 집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다. 각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때, 아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.

 1번 집의 색은 2번 집의 색과 같지 않아야 한다.
 N번 집의 색은 N-1번 집의 색과 같지 않아야 한다.
 i(2 ≤ i ≤ N-1)번 집의 색은 i-1번, i+1번 집의 색과 같지 않아야 한다.
 
 [입력]
 첫째 줄에 집의 수 N(2 ≤ N ≤ 1,000)이 주어진다. 둘째 줄부터 N개의 줄에는 각 집을 빨강, 초록, 파랑으로 칠하는 비용이 1번 집부터 한 줄에 하나씩 주어진다. 집을 칠하는 비용은 1,000보다 작거나 같은 자연수이다.

 [출력]
 첫째 줄에 모든 집을 칠하는 비용의 최솟값을 출력한다.

 [예제 입력 1]
 3
 26 40 83
 49 60 57
 13 89 99
 
 [예제 출력 1]
 96
 */
import Foundation

/// RGB거리
func RGB거리() {
//    let n = 3
//    let rgb = [[26, 40, 83], [49, 60, 57], [13, 89, 99]]
    
    let n = Int(readLine()!)!
    let rgb = (0..<n).map { _ in readLine()!.split(separator: " ").compactMap { Int($0) } }
    // component 왜 안먹는지 이해가 안감......... 백준.......
    
    var dp = Array(repeating: [0, 0, 0], count: n)
    dp[0] = rgb[0]
    
    // 이전 값들과 겹치지 않으면서 나머지 값에서 최소값을 DP에 저장한다.
    // 저장할 때 현재의 금액도 더해서 저장해야한다.
    // RGB 각각 최소값으로 이루어진 DP가 만들어진다.
    for i in 1..<n {
        let DP = dp[i - 1]
        dp[i][0] = min(DP[1], DP[2]) + rgb[i][0]
        dp[i][1] = min(DP[0], DP[2]) + rgb[i][1]
        dp[i][2] = min(DP[0], DP[1]) + rgb[i][2]
    }
    
    print(dp[n - 1].min()!) // 각 최소값으로 이루어진 DP에서 최소값을 반환한다.
}
