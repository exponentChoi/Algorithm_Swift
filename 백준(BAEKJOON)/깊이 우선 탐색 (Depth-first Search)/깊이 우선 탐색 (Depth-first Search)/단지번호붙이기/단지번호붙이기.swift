//
//  단지번호붙이기.swift
//  깊이 우선 탐색 (Depth-first Search)
//
//  Created by 최지수 on 2021/12/15.
//

/**
 [문제]
 <그림 1>과 같이 정사각형 모양의 지도가 있다. 1은 집이 있는 곳을, 0은 집이 없는 곳을 나타낸다. 철수는 이 지도를 가지고 연결된 집의 모임인 단지를 정의하고, 단지에 번호를 붙이려 한다. 여기서 연결되었다는 것은 어떤 집이 좌우, 혹은 아래위로 다른 집이 있는 경우를 말한다. 대각선상에 집이 있는 경우는 연결된 것이 아니다. <그림 2>는 <그림 1>을 단지별로 번호를 붙인 것이다. 지도를 입력하여 단지수를 출력하고, 각 단지에 속하는 집의 수를 오름차순으로 정렬하여 출력하는 프로그램을 작성하시오.

 [입력]
 첫 번째 줄에는 지도의 크기 N(정사각형이므로 가로와 세로의 크기는 같으며 5≤N≤25)이 입력되고, 그 다음 N줄에는 각각 N개의 자료(0혹은 1)가 입력된다.

 [출력]
 첫 번째 줄에는 총 단지수를 출력하시오. 그리고 각 단지내 집의 수를 오름차순으로 정렬하여 한 줄에 하나씩 출력하시오.

 [예제 입력 1]
 7
 0110100
 0110101
 1110101
 0000111
 0100000
 0111110
 0111000
 [예제 출력 1]
 3
 7
 8
 9
 */

/**
 - 이 문제에서 시간이 걸린 이유
 단지명을 저장할 때 최초 시작한 좌표를 합한 String값으로 저장했는데
 x = 1, y = 11 일때와 x = 11, y = 1일 때 단지명(111)이 같아 동일한 단지에 저장되는 이슈가 발생했다.
 x와 y 사이에 쉼표를 넣어 확실하게 단지명을 구분하여 저장하여 문제를 풀었다.
 */
import Foundation

/*
 콘솔용 입력(복사 후 콘솔에 입력) - 90번 째 줄부터 예제 더 있음.
7
0110100
0110101
1110101
0000111
0100000
0111110
0111000
 */

/// 단지번호붙이기 [2667번]
func 단지번호붙이기() {
    
    let n = Int(readLine()!)! // 지도의 크기 (정사각형)
    let maps = (0..<n).map { _ in readLine()!.map { String($0) }} // 지도
    let directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] // 이동할 방향 (남, 동, 북, 서)
    
    var explored = Array(repeating: Array(repeating: false, count: n), count: n) // 수색 여부 저장
    var groups = [String: Int]() // [단지명: 단지수]
    
    func dfs(_ x: Int, _ y: Int, tag: String) {
        explored[x][y] = true
        groups[tag, default: 0] += 1
        
        for direction in directions {
            let goX = direction.0 + x
            let goY = direction.1 + y
            
            if goX >= 0 && goX < n && goY >= 0 && goY < n {
                if maps[goX][goY] == "1" && explored[goX][goY] == false {
                    dfs(goX, goY, tag: tag)
                }
            }
        }
    }
    
    for i in 0..<maps.count {
        for j in 0..<maps[i].count {
            if maps[i][j] == "1" && explored[i][j] == false {
                dfs(i, j, tag: "\(i),\(j)")
            }
        }
    }
    
    print(groups.count)
    groups.sorted(by: { $0.value < $1.value })
        .forEach {
            print($0.value)
        }
}



/*
 
5
01101
01101
11100
00011
00100
 
10
1010101010
0101010101
1010101010
0101010101
1010101010
0101010101
1010101010
0101010101
1010101010
0101010101
 
 
10
1111111111
1111111111
1111111111
1111111111
1111111111
1111111111
1111111111
1111111111
1111111111
1111111111
 
25
1100011000110001100011000
0000011000110001100011000
0000011000110001100011000
0000011000110001100011000
0000111000110001100011000
1100011000110001100011000
0000011000110001100011000
0000011000110001100011000
0000011000110001100011000
0000111000110001100011000
1100011000110001100011000
0000011000110001100011000
0000011000110001100011000
0000011000110001100011000
0000111000110001100011000
1100011000110001100011000
0000011000110001100011000
0000011000110001100011000
0000011000110001100011000
0000111000110001100011000
1100011000110001100011000
0000011000110001100011000
0000011000110001100011000
0000011000110001100011000
0000111000110001100011000
 
25
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
1111111111111111111111111
 
25
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000
0000000000000000000000000

 - 313개가 나와야 함.
25
1010101010101010101010101
0101010101010101010101010
1010101010101010101010101
0101010101010101010101010
1010101010101010101010101
0101010101010101010101010
1010101010101010101010101
0101010101010101010101010
1010101010101010101010101
0101010101010101010101010
1010101010101010101010101
0101010101010101010101010
1010101010101010101010101
0101010101010101010101010
1010101010101010101010101
0101010101010101010101010
1010101010101010101010101
0101010101010101010101010
1010101010101010101010101
0101010101010101010101010
1010101010101010101010101
0101010101010101010101010
1010101010101010101010101
0101010101010101010101010
1010101010101010101010101
 
 */

