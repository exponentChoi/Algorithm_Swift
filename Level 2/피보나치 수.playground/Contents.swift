/**
 난이도: Level 2
 
 [문제 설명]
 피보나치 수는 F(0) = 0, F(1) = 1일 때, 1 이상의 n에 대하여 F(n) = F(n-1) + F(n-2) 가 적용되는 수 입니다.

 [예를들어]

 F(2) = F(0) + F(1) = 0 + 1 = 1
 F(3) = F(1) + F(2) = 1 + 1 = 2
 F(4) = F(2) + F(3) = 1 + 2 = 3
 F(5) = F(3) + F(4) = 2 + 3 = 5
 와 같이 이어집니다.

 2 이상의 n이 입력되었을 때, n번째 피보나치 수를 1234567으로 나눈 나머지를 리턴하는 함수, solution을 완성해 주세요.

 [제한 사항]
 * n은 1이상, 100000이하인 자연수입니다.

 [입출력 예]
 n    return
 3    2
 5    5
 
 [입출력 예 설명]
 피보나치수는 0번째부터 0, 1, 1, 2, 3, 5, ... 와 같이 이어집니다.
 */

func solution(_ n:Int) -> Int {
    guard n > 1 else { return n }
    
    var array = [0, 1]
    
    (1..<n).forEach {
        // n번째 자리에 들어갈 n-1, n-2 를 구한 뒤 array에 추가한다.
        array.append((array[$0 - 1] + array[$0]) % 1234567)
    }
    
    return array.last!
}

print(solution(3))
print(solution(5))


//print(Int.max)      //  9,223,372,036,854,775,807
//print(UInt.max)     // 18,446,744,073,709,551,615
//print(solution(92)) //  7,540,113,804,746,346,429
//print(solution(93)) // 93부터는 안나온다..

/* 질문하기에 있는 내용 !!!
 한줄요약: 문제에서 1234567로 나눈 나머지를 정답으로 내놓으라는 것은 문제를 꼰 것이 아니라 int 자료형의 범위 내에 항상 값이 있을 수 있도록 한 배려이며, 자료형의 크기에 제한이 있는 언어를 쓸 경우 (A + B) % C ≡ ( ( A % C ) + ( B % C) ) % C라는 성질을 이용해서 매번 계산 결과에 1234567으로 나눈 나머지를 대신 넣는 것으로 int 범위 내에 항상 값이 존재함을 보장할 수 있다.
 */
