/**
 난이도: Level 2 - 스택/큐
 
 [문제 설명]
 프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.

 또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.

 먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.

 [제한 사항]
 작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다.
 작업 진도는 100 미만의 자연수입니다.
 작업 속도는 100 이하의 자연수입니다.
 배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다.
 
 [입출력 예]
 progresses                         speeds                    return
 [93, 30, 55]                      [1, 30, 5]               [2, 1]
 [95, 90, 99, 99, 80, 99]    [1, 1, 1, 1, 1, 1]     [1, 3, 2]
 
 [입출력 예 설명]
 [입출력 예 #1]
 첫 번째 기능은 93% 완료되어 있고 하루에 1%씩 작업이 가능하므로 7일간 작업 후 배포가 가능합니다.
 두 번째 기능은 30%가 완료되어 있고 하루에 30%씩 작업이 가능하므로 3일간 작업 후 배포가 가능합니다. 하지만 이전 첫 번째 기능이 아직 완성된 상태가 아니기 때문에 첫 번째 기능이 배포되는 7일째 배포됩니다.
 세 번째 기능은 55%가 완료되어 있고 하루에 5%씩 작업이 가능하므로 9일간 작업 후 배포가 가능합니다.

 따라서 7일째에 2개의 기능, 9일째에 1개의 기능이 배포됩니다.
 */

import Foundation

func solution(_ progresses:[Int], _ speeds:[Int]) -> [Int] {
    var answer:[Int] = [1] // 배포한 횟수의 배열
    let days = zip(progresses, speeds) // 각 기능별로 작업 완료된 일수를 구한다.
        .map { ceil((100 - Double($0)) / Double($1)) } // 각 기능별 필요한 일수를 구한다. (2.3인 경우 3일이 소요된 것이므로 올림처리한다.)
    
    var day = days.first! // 배포한 기능의 작업한 일수

    // 개발한 기능을 배포할 때 뒤에 개발한것 중 완료된게 있으면 같이 배포한다.
    for i in 1..<days.count {
        if days[i] <= day { // 앞 기능을 배포할 때 다음 기능이 완료된 경우
            answer[answer.count - 1] += 1 // 배포한 횟수에 +1
        } else { // 앞 기능을 배포할 때 다음 기능이 완료되지 않은 경우
            answer.append(1) // 배포한 횟수 배열을 추가한다.
            day = days[i] // 작업한 일수를 저장한다.
        }
    }
    
    return answer
}

print("Solution 1")
print(solution([93, 30, 55], [1, 30, 5])) // [2, 1]
print(solution([95, 90, 99, 99, 80, 99], [1, 1, 1, 1, 1, 1])) // [1, 3, 2]
print(solution([70], [20])) // 2


// MARK: - 다른사람 문제 풀이
func solution2(_ progresses:[Int], _ speeds:[Int]) -> [Int] {
    return zip(progresses, speeds)
        .map { (100 - $0) / $1 } // 각 기능별 필요한 일수를 구한다.
        .reduce(([], 0)) { (tuple, day) -> ([Int], Int) in // (배포한 횟수를 저장한 배열, 작업한 일자), 작업한 일자
            let (list, lastMax) = tuple
        
            guard let lastCount = list.last else { // 마지막에 배포한 횟수
                return ([1], day) // 배포가 처음인 경우
            }
            
            if lastMax >= day { // 마지막에 배포한 일수가 해당 일수보다 큰 경우 (마지막 배포일보다 적게 걸렸으면 같이 배포가 가능하다.)
                return (list.dropLast() + [lastCount + 1], lastMax) // 배포한 횟수를 1 추가하고, 앞 기능의 작업한 일수를 반환한다.
            }
            
            // 해당 기능을 배포할 때 뒤에 기능이 완료되지 않은 경우
            return (list + [1], day) // 같이 배포하지 못했으므로, 배열에 1개를 추가한다. 그리고 작업한 일수를 반환한다.
        }.0
}

print("\nSolution 2")
print(solution2([93, 30, 55], [1, 30, 5]))
print(solution2([95, 90, 99, 99, 80, 99], [1, 1, 1, 1, 1, 1]))
print(solution([70], [20])) // 2
